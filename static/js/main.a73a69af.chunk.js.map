{"version":3,"sources":["App.js","CalculatorDisplay.js","CalculatorInput.js","index.js"],"names":["App","props","state","current","total","handleButton","bind","this","setState","handleComputation","test","length","Math","round","eval","handleOperator","operator","digit","e","value","target","textContent","handleClear","handleDigit","handleDecimal","console","error","className","Component","CalculatorDisplay","id","CalculatorInput","calculatorButtons","text","map","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a73a69af.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './css/App.css';\nimport CalculatorDisplay from './CalculatorDisplay';\nimport CalculatorInput from './CalculatorInput';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      current: '0',\n      total: '',\n    }\n    this.handleButton = this.handleButton.bind(this);\n  }\n\n  // reset the display's values\n  handleClear() {\n    this.setState({\n      current: '0',\n      total: '',\n    })\n  }\n  // compute the total\n  handleComputation() {\n    const { current, total } = this.state;\n    // ! compute the total only if the last figure included in the current display is **not** an operator\n    if(!/[+\\-*/]/.test(current[current.length -1])) {\n      this.setState({\n        current:  Math.round(eval(`${total}${current}`) * 10000) / 10000,\n        total: '',\n      })\n    }\n  }\n  // include the operator\n  handleOperator(operator) {\n    const { current, total } = this.state;\n    // if current already displays an operator, consider the position of the operator itself\n    if(/[+\\-*/]/.test(current)) {\n      // the operator is the last figure --> substitute with the new operator\n      if(/[+\\-*/]/.test(current[current.length -1])) {\n        // ! do not substitute the operator, but append the value, if the value is the minus sign and there's no preceding minus sign\n        if(operator !== '-') {\n          this.setState({\n            current: operator,\n          })\n        } else if(!/\\-/.test(current)) {\n          this.setState({\n            current: `${current}${operator}`\n          })\n        }\n      } else {\n        // the existing operator is followed by numbers: compute te total and include the operator in the current display\n        this.setState({\n          current: operator,\n          total: Math.round(eval(`${total}${current}`) * 10000) / 10000,\n        })\n      }\n    } else {\n      // there is no operator: add the operator to the current display whilst moving the existing expression to the total\n      this.setState({\n        current: operator,\n        total: current,\n      })\n    }\n  }\n  // add a digit\n  handleDigit(digit) {\n    const { current } = this.state;\n    // ! add the digit only if the current display is different from '0'\n    // this to avoid leading 0s\n    this.setState({\n      current: current !== '0' ? `${current}${digit}` : digit,\n    })\n  }\n  // add the decimal point\n  handleDecimal() {\n    const { current } = this.state;\n    // ! add the point only if no point is already included\n    if(!/\\./.test(current)) {\n      this.setState({\n        current: `${current}.`\n      })\n    }\n  }\n\n  handleButton(e) {\n    const {textContent: value} = e.target;\n    switch(value) {\n      case 'ac':\n        this.handleClear();\n        break;\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n        this.handleDigit(value);\n        break;\n      case '+':\n      case '-':\n      case '*':\n      case '/':\n        this.handleOperator(value);\n        break;\n      case '=':\n        this.handleComputation();\n        break;\n      case '.':\n        this.handleDecimal();\n        break;\n      default:\n        console.error('Technically, this should never happen.');\n    }\n  }\n  render() {\n    const { current, total } = this.state;\n    const { handleButton } = this;\n    return (\n      <div className=\"App\">\n          <CalculatorDisplay current={current} total={total}/>\n          <CalculatorInput handleButton={handleButton}/>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\r\nimport './css/CalculatorDisplay.css';\r\n\r\nconst CalculatorDisplay = (props) => {\r\n  const { current, total } = props;\r\n  return(\r\n    <div className=\"CalculatorDisplay\">\r\n      <h2>{total}</h2>\r\n      <h1 id=\"display\">{current}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalculatorDisplay;","import React from 'react';\r\nimport './css/CalculatorInput.css';\r\n\r\n// starting from a static array describing the different buttons of the calculator include one button for each item\r\nconst CalculatorInput = (props) => {\r\n  // following the guidelines @freecodecamp, each button has an arbitrary identifier\r\n  const buttons = [\r\n    {\r\n      text: '0',\r\n      id: 'zero',\r\n    },\r\n    {\r\n      text: '1',\r\n      id: 'one',\r\n    },\r\n    {\r\n      text: '2',\r\n      id: 'two',\r\n    },\r\n    {\r\n      text: '3',\r\n      id: 'three',\r\n    },\r\n    {\r\n      text: '4',\r\n      id: 'four',\r\n    },\r\n    {\r\n      text: '5',\r\n      id: 'five',\r\n    },\r\n    {\r\n      text: '6',\r\n      id: 'six',\r\n    },\r\n    {\r\n      text: '7',\r\n      id: 'seven',\r\n    },\r\n    {\r\n      text: '8',\r\n      id: 'eight',\r\n    },\r\n    {\r\n      text: '9',\r\n      id: 'nine',\r\n    },\r\n    {\r\n      text: '.',\r\n      id: 'decimal',\r\n    },\r\n    {\r\n      text: '+',\r\n      id: 'add',\r\n    },\r\n    {\r\n      text: '-',\r\n      id: 'subtract',\r\n    },\r\n    {\r\n      text: '*',\r\n      id: 'multiply',\r\n    },\r\n    {\r\n      text: '/',\r\n      id: 'divide',\r\n    },\r\n    {\r\n      text: '=',\r\n      id: 'equals',\r\n    },\r\n    {\r\n      text: 'ac',\r\n      id: 'clear',\r\n    },\r\n  ]\r\n  const { handleButton }= props;\r\n  const calculatorButtons = buttons.map(({ text, id }) => (\r\n    <button key={id} id={id} onClick={handleButton}>{text}</button>\r\n  ));\r\n  return(\r\n    <div className=\"CalculatorInput\">\r\n      {\r\n        calculatorButtons\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CalculatorInput;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}